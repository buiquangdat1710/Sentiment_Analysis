import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from transformers import pipeline
import plotly.express as px
import plotly.graph_objects as go
from streamlit_lottie import st_lottie
import requests
import json
import google.generativeai as genai

import os
from dotenv import load_dotenv

load_dotenv()
API_KEY = os.getenv("API_KEY")

# Set page configuration
st.set_page_config(
    page_title="·ª®ng d·ª•ng Ph√¢n t√≠ch C·∫£m x√∫c",
    page_icon="üòÄ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS to enhance UI
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: 800;
        background: linear-gradient(to right, #1E88E5, #8E24AA);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 0.5rem;
        padding-top: 1rem;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #424242;
        text-align: center;
        margin-bottom: 2rem;
    }
    .highlight {
        color: #1E88E5;
        font-weight: bold;
    }
    .card {
        padding: 1.5rem;
        border-radius: 0.7rem;
        background-color: #1e2130;
        box-shadow: 0 6px 10px rgba(0, 0, 0, 0.3);
        margin-bottom: 1.2rem;
        border-top: 4px solid #1E88E5;
        color: #e0e0e0;
    }
    .stTextInput > div > div > input {
        font-size: 1.2rem;
        padding: 0.8rem;
    }
    .emotion-label {
        font-size: 1.8rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(to right, #1E88E5, #8E24AA);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .insight-text {
        font-size: 1rem;
        color: #424242;
        line-height: 1.5;
    }
    .stButton>button {
        background: linear-gradient(to right, #1E88E5, #8E24AA);
        border: none;
        color: white;
        font-size: 1.2rem;
        font-weight: 600;
        padding: 0.6rem 2.5rem;
        border-radius: 50px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 15px rgba(30, 136, 229, 0.3);
    }
    /* Custom styling for sidebar */
    .css-1d391kg, .css-163ttbj {
        background-image: linear-gradient(to bottom, #f5f7fa, #e4e8f0);
    }
    /* Styling for text area */
    .stTextArea textarea {
        border-radius: 10px;
        border: 1px solid #E0E0E0;
        padding: 10px;
        font-size: 1.1rem;
        box-shadow: inset 0 1px 3px rgba(0,0,0,0.1);
    }
    .stTextArea textarea:focus {
        border-color: #1E88E5;
        box-shadow: 0 0 0 2px rgba(30,136,229,0.2);
    }
    /* Footer styling */
    .footer {
        text-align: center;
        margin-top: 3rem;
        padding: 1.5rem;
        background-color: #1e2130;
        border-radius: 10px;
        box-shadow: 0 -2px 10px rgba(0,0,0,0.2);
        color: #e0e0e0;
    }
    /* Section headers */
    .section-header {
        font-size: 1.5rem;
        font-weight: 600;
        color: #e0e0e0;
        margin-bottom: 1rem;
        border-bottom: 2px solid #424242;
        padding-bottom: 0.5rem;
    }
    /* Insight bullets */
    .insight-bullet {
        background-color: #263238;
        padding: 0.8rem 1rem;
        border-radius: 8px;
        margin-bottom: 0.7rem;
        border-left: 4px solid #1E88E5;
        color: #e0e0e0;
    }
</style>
""", unsafe_allow_html=True)

# Function to load Lottie animation
def load_lottieurl(url):
    try:
        r = requests.get(url)
        if r.status_code != 200:
            return None
        return r.json()
    except:
        return None

# Function to get emotion insights
vietnamese_labels = {
                "joy": "Vui v·∫ª",
                "sadness": "Bu·ªìn b√£",
                "anger": "T·ª©c gi·∫≠n",
                "fear": "S·ª£ h√£i",
                "love": "Y√™u th∆∞∆°ng",
                "surprise": "Ng·∫°c nhi√™n"
            }
def get_emotion_insights(emotion, score):

    insights = {
        "joy": [
            "Th·ªÉ hi·ªán s·ª± h·∫°nh ph√∫c, h√†i l√≤ng ho·∫∑c ph·∫•n kh√≠ch t√≠ch c·ª±c.",
            "ƒêi·ªÉm cao cho th·∫•y n·ªôi dung t√≠ch c·ª±c ho·∫∑c mang t√≠nh k·ª∑ ni·ªám.",
            "C·∫ßn xem x√©t ng·ªØ c·∫£nh - ni·ªÅm vui c√≥ th·ªÉ th·ª±c s·ª± ho·∫∑c mang t√≠nh m·ªâa mai."
        ],
        "sadness": [
            "Ph·∫£n √°nh s·ª± th·∫•t v·ªçng, ƒëau bu·ªìn ho·∫∑c m·∫•t m√°t.",
            "ƒêi·ªÉm cao cho th·∫•y c√≥ th·ªÉ ƒëang g·∫∑p kh√≥ khƒÉn c√° nh√¢n ho·∫∑c tr·∫£i nghi·ªám ti√™u c·ª±c.",
            "VƒÉn b·∫£n th∆∞·ªùng ch·ª©a ng√¥n ng·ªØ u √°m ho·∫∑c ƒë·ªÅ c·∫≠p ƒë·∫øn kh√≥ khƒÉn."
        ],
        "anger": [
            "Th·ªÉ hi·ªán s·ª± t·ª©c gi·∫≠n, kh√≥ ch·ªãu ho·∫∑c b·ª±c b·ªôi.",
            "ƒêi·ªÉm cao th∆∞·ªùng ƒëi k√®m ng√¥n ng·ªØ ti√™u c·ª±c m·∫°nh ho·∫∑c ch·ªâ tr√≠ch.",
            "C√≥ th·ªÉ cho th·∫•y s·ª± b·∫•t m√£n v·ªõi d·ªãch v·ª•, tr·∫£i nghi·ªám ho·∫∑c con ng∆∞·ªùi."
        ],
        "fear": [
            "Th·ªÉ hi·ªán s·ª± lo l·∫Øng, s·ª£ h√£i v·ªÅ ƒëi·ªÅu g√¨ ƒë√≥.",
            "ƒêi·ªÉm cao cho th·∫•y lo ng·∫°i v·ªÅ c√°c s·ª± ki·ªán t∆∞∆°ng lai ho·∫∑c kh√¥ng ch·∫Øc ch·∫Øn.",
            "Th∆∞·ªùng ch·ª©a ng√¥n ng·ªØ v·ªÅ r·ªßi ro, nguy hi·ªÉm ho·∫∑c h·∫≠u qu·∫£ ti√™u c·ª±c."
        ],
        "love": [
            "Th·ªÉ hi·ªán t√¨nh c·∫£m, s·ª± tr√¨u m·∫øn ho·∫∑c c·∫£m x√∫c l√£ng m·∫°n.",
            "ƒêi·ªÉm cao th∆∞·ªùng li√™n quan ƒë·∫øn bi·ªÉu hi·ªán t√¨nh c·∫£m t√≠ch c·ª±c v·ªõi ng∆∞·ªùi kh√°c.",
            "C√≥ th·ªÉ ch·ª©a c√°c t·ª´ ng·ªØ tr√¨u m·∫øn ho·∫∑c l√≤ng bi·∫øt ∆°n."
        ],
        "surprise": [
            "Th·ªÉ hi·ªán s·ª± ng·∫°c nhi√™n, b·∫•t ng·ªù.",
            "ƒêi·ªÉm cao cho th·∫•y g·∫∑p ph·∫£i ƒëi·ªÅu g√¨ ƒë√≥ kh√¥ng mong ƒë·ª£i.",
            "C√≥ th·ªÉ l√† t√≠ch c·ª±c (ng·∫°c nhi√™n th√∫ v·ªã) ho·∫∑c ti√™u c·ª±c (s·ªëc)."
        ]
    }
    
    # Th√™m ƒë√°nh gi√° c∆∞·ªùng ƒë·ªô
    if score > 0.8:
        intensity = f"VƒÉn b·∫£n th·ªÉ hi·ªán s·ª± {vietnamese_labels[emotion]} r·∫•t m·∫°nh m·∫Ω."
    elif score > 0.6:
        intensity = f"VƒÉn b·∫£n th·ªÉ hi·ªán r√µ r√†ng s·ª± {vietnamese_labels[emotion]}."
    elif score > 0.4:
        intensity = f"VƒÉn b·∫£n cho th·∫•y d·∫•u hi·ªáu v·ª´a ph·∫£i c·ªßa s·ª± {vietnamese_labels[emotion]}."
    elif score > 0.2:
        intensity = f"VƒÉn b·∫£n c√≥ g·ª£i √Ω tinh t·∫ø v·ªÅ s·ª± {vietnamese_labels[emotion]}."
    else:
        intensity = f"VƒÉn b·∫£n ch·ªâ c√≥ d·∫•u v·∫øt r·∫•t nh·ªè c·ªßa s·ª± {vietnamese_labels[emotion]}."
        
    return [intensity] + insights.get(emotion, ["Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt cho c·∫£m x√∫c n√†y."])

# Function to get color map for emotions
def get_emotion_colors():
    return {
        "joy": "#FFD700",      # Gold
        "sadness": "#4682B4",  # Steel Blue
        "anger": "#DC143C",    # Crimson
        "fear": "#800080",     # Purple
        "love": "#FF1493",     # Deep Pink
        "surprise": "#FF8C00"  # Dark Orange
    }

# Function to get emoji for emotions
def get_emotion_emoji():
    return {
        "joy": "üòÑ",
        "sadness": "üò¢",
        "anger": "üò†",
        "fear": "üò®",
        "love": "‚ù§Ô∏è",
        "surprise": "üò≤"
    }


genai.configure(api_key=API_KEY)

def analyze_emotion_with_gemini(user_input, top_emotion):
    try:
        # Kh·ªüi t·∫°o model Gemini
        # model = genai.GenerativeModel('gemini-pro')
        model = genai.GenerativeModel('gemini-1.5-flash')
        # Prompt g·ª≠i t·ªõi Gemini
        contents = f"C√¢u n√≥i: '{user_input}' ƒë∆∞·ª£c model AI g·∫Øn nh√£n l√†: '{vietnamese_labels[top_emotion]}'. B·∫°n h√£y ph√¢n t√≠ch th·∫≠t k·ªπ c·∫£m x√∫c c·ªßa c√¢u n√≥i tr√™n v√† nh·∫≠n x√©t v·ªÅ d·ª± ƒëo√°n c·ªßa model, c·ªë g·∫Øng khen model k·ªá c·∫£ n√≥ d·ª± ƒëo√°n ch∆∞a ƒë∆∞·ª£c t·ªët"
        
        # G·ªçi API v√† nh·∫≠n ph·∫£n h·ªìi
        response = model.generate_content(contents)

        return response.text
    except Exception as e:
        return f"Error calling Gemini API: {str(e)}"

# Title and description
st.markdown('<h1 class="main-header">üîç ·ª®ng d·ª•ng Ph√¢n t√≠ch C·∫£m x√∫c</h1>', unsafe_allow_html=True)
st.markdown('<p class="sub-header">Ph√¢n t√≠ch c·∫£m x√∫c ·∫©n sau b·∫•t k·ª≥ vƒÉn b·∫£n n√†o b·∫±ng NLP</p>', unsafe_allow_html=True)

# Create columns for layout
col1, col2 = st.columns([2, 1])

with col2:
    # Add animation
    lottie_url = "https://assets10.lottiefiles.com/packages/lf20_xt3zjzlv.json"  # More elegant emotion analysis animation
    lottie_json = load_lottieurl(lottie_url)
    if lottie_json:
        st_lottie(lottie_json, height=220, key="emotion_animation")
    else:
        # Fallback if animation doesn't load
        st.markdown("""
        <div style="text-align: center; padding: 20px;">
            <span style="font-size: 100px;">üîçüòÄüò¢üò†</span>
        </div>
        """, unsafe_allow_html=True)

with col1:
    # Input text
    user_input = st.text_area("Nh·∫≠p vƒÉn b·∫£n ti·∫øng anh ƒë·ªÉ ph√¢n t√≠ch c·∫£m x√∫c:", 
                            "I saw a movie today and it was really good.", 
                            height=120)
    
    # Analyze button with centered layout
    col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
    with col_btn2:
        analyze_button = st.button("Ph√¢n t√≠ch C·∫£m x√∫c")
    st.markdown('</div>', unsafe_allow_html=True)

# Load the model when the app starts to avoid reloading
@st.cache_resource
def load_model():
    model_id = "Dat1710/distilbert-base-uncased-finetuned-emotion"
    return pipeline("text-classification", model=model_id)

# Try to load the model
try:
    classifier = load_model()
    model_loaded = True
except Exception as e:
    st.error(f"Error loading model: {e}")
    model_loaded = False

# Define emotion labels
emotion_labels = ["sadness", "joy", "love", "anger", "fear", "surprise"]




# When analyze button is clicked
if analyze_button and model_loaded:
    if user_input.strip():
        # Add a spinner while processing
        with st.spinner("ƒêang ph√¢n t√≠ch c·∫£m x√∫c..."):
            # Get predictions
            preds = classifier(user_input, return_all_scores=True)
            preds_df = pd.DataFrame(preds[0])
            
            # Ensure we use the correct labels instead of indices
            # Map any numeric or incorrect labels to our emotion labels if needed
            if not all(label in emotion_labels for label in preds_df["label"]):
                # If labels are indices, map them to proper emotion names
                label_mapping = {i: emotion_labels[i] if i < len(emotion_labels) else f"unknown_{i}" 
                                for i in range(len(preds_df))}
                preds_df["label"] = preds_df.index.map(lambda x: label_mapping.get(x, f"unknown_{x}"))
            
            # Sort predictions by score
            preds_df = preds_df.sort_values(by="score", ascending=False)
            
            # Get top emotion
            top_emotion = preds_df.iloc[0]["label"]
            top_score = preds_df.iloc[0]["score"]
            # Get emoji and color map
            emotion_emoji = get_emotion_emoji()
            emotion_colors = get_emotion_colors()
            
            # Display results
            col_result1, col_result2 = st.columns([1, 2])
            
            with col_result1:
                st.markdown(f'<p class="emotion-label">{emotion_emoji.get(top_emotion, "")}{top_emotion.capitalize()}</p>', unsafe_allow_html=True)
                
                # Create a radial gauge for confidence
                fig = go.Figure(go.Indicator(
                    mode = "gauge+number",
                    value = top_score * 100,
                    domain = {'x': [0, 1], 'y': [0, 1]},
                    title = {'text': "Confidence", 'font': {'size': 24}},
                    gauge = {
                        'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
                        'bar': {'color': emotion_colors.get(top_emotion, "#1E88E5")},
                        'bgcolor': "white",
                        'borderwidth': 2,
                        'bordercolor': "gray",
                        'steps': [
                            {'range': [0, 25], 'color': '#EFF3F6'},
                            {'range': [25, 50], 'color': '#DEE5ED'},
                            {'range': [50, 75], 'color': '#CEDBE3'},
                            {'range': [75, 100], 'color': '#BDD1DA'}
                        ],
                        'threshold': {
                            'line': {'color': "red", 'width': 4},
                            'thickness': 0.75,
                            'value': top_score * 100
                        }
                    }
                ))
                
                fig.update_layout(
                    height=400,
                    margin=dict(l=20, r=30, t=30, b=20),
                    paper_bgcolor='rgba(0,0,0,0)',
                    font={'color': "#424242", 'family': "Arial"}
                )
                
                st.plotly_chart(fig, use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Create a horizontal bar chart using Plotly
            preds_df["color"] = preds_df["label"].map(lambda x: emotion_colors.get(x, "#CCCCCC"))
            fig = go.Figure()
            fig.add_trace(go.Bar(
                y= preds_df["label"].map(vietnamese_labels),
                x=preds_df["score"] * 100,
                orientation='h',
                marker_color=preds_df["color"],
                text=[f"{score:.1f}%" for score in preds_df["score"] * 100],
                textposition='auto',
                hoverinfo="text",
                hovertext=[f"{label.capitalize()}: {score:.2%}" for label, score in zip(preds_df["label"], preds_df["score"])]
            ))
            
            fig.update_layout(
                title={
                    'text': "Emotion Distribution",
                    'y':0.95,
                    'x':0.5,
                    'xanchor': 'center',
                    'yanchor': 'top',
                    'font': {'size': 24, 'color': '#424242'}
                },
                xaxis_title="Probability (%)",
                yaxis_title="Emotion",
                height=350,
                margin=dict(l=20, r=20, t=50, b=30),
                xaxis=dict(range=[0, 100]),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
                font={'size': 14, 'color': '#424242'},
                shapes=[
                    # Add reference lines
                    go.layout.Shape(
                        type="line",
                        x0=25, y0=-0.5,
                        x1=25, y1=len(preds_df)-0.5,
                        line=dict(color="#E0E0E0", width=1, dash="dash")
                    ),
                    go.layout.Shape(
                        type="line",
                        x0=50, y0=-0.5,
                        x1=50, y1=len(preds_df)-0.5,
                        line=dict(color="#E0E0E0", width=1, dash="dash")
                    ),
                    go.layout.Shape(
                        type="line",
                        x0=75, y0=-0.5,
                        x1=75, y1=len(preds_df)-0.5,
                        line=dict(color="#E0E0E0", width=1, dash="dash")
                    )
                ]
            )
            
            # Display the chart
            with col_result2:
                st.plotly_chart(fig, use_container_width=True)
                st.markdown('</div>', unsafe_allow_html=True)
            
            # Display insights
            st.markdown('<h3 class="section-header">üí° Ph√¢n T√≠ch C·∫£m X√∫c </h3>', unsafe_allow_html=True)
            with st.spinner("ƒêang ph√¢n t√≠ch chi ti·∫øt c·∫£m x√∫c ..."):
                gemini_insight = analyze_emotion_with_gemini(user_input, top_emotion)
                st.markdown(f'<div class="insight-bullet">{gemini_insight}</div>', unsafe_allow_html=True)
            
            # Additional insights on emotion distribution
            second_emotion = preds_df.iloc[1]["label"]
            second_score = preds_df.iloc[1]["score"]
            

            # Ph·∫ßn Sentiment Direction s·ª≠a th√†nh bi·ªÉu ƒë·ªì 6 c·∫£m x√∫c
            st.markdown('<h3 class="section-header">üß≠ Ph√¢n B·ªï C·∫£m X√∫c</h3>', unsafe_allow_html=True)
            threshold = 0.0001  # 1%
            preds_df = preds_df[preds_df["score"] > threshold]

            col_chart, col_legend = st.columns([3, 1])

            with col_chart:
                fig = go.Figure()
                fig.add_trace(go.Pie(
                    labels=[vietnamese_labels[label] for label in preds_df["label"]],
                    values=preds_df["score"] * 100,
                    marker=dict(colors=[emotion_colors[label] for label in preds_df["label"]]),
                    textinfo="label",
                    insidetextorientation="radial",
                    hole=0.4,
                    hoverinfo="label+percent+value"
                ))
                
                fig.update_layout(
                    showlegend=False,  # T·∫Øt legend m·∫∑c ƒë·ªãnh
                    height=400,
                    margin=dict(l=20, r=20, t=100, b=10),
                    paper_bgcolor='rgba(0,0,0,0)'
                )
                st.plotly_chart(fig, use_container_width=True)

            with col_legend:
                # T·∫°o b·∫£ng x√°c su·∫•t
                st.markdown("""
                <style>
                    .legend-table {
                        background: white;
                        border-radius: 10px;
                        padding: 15px;
                        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                    }
                    .legend-item {
                        display: flex;
                        align-items: center;
                        margin: 8px 0;
                    }
                    .color-box {
                        width: 20px;
                        height: 20px;
                        border-radius: 4px;
                        margin-right: 10px;
                    }
                </style>
                """, unsafe_allow_html=True)
                
                # Hi·ªÉn th·ªã t·ª´ng c·∫£m x√∫c v·ªõi m√†u v√† x√°c su·∫•t
                for _, row in preds_df.iterrows():
                    st.markdown(f"""
                    <div class="legend-item">
                        <div class="color-box" style="background: {emotion_colors[row['label']]};"></div>
                        <div>
                            <span style="font-weight:500; color:#424242;">{vietnamese_labels[row['label']]}</span><br>
                            <span style="font-size:0.9em; color:#757575;">{row['score']*100:.4f} %</span>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                
                st.markdown("</div>", unsafe_allow_html=True)
            
    else:
        st.warning("Please enter some text to analyze.")

# Footer
st.markdown("""
<div class="footer">
    <h3>Gi·ªõi Thi·ªáu ·ª®ng D·ª•ng</h3>
    <p>·ª®ng d·ª•ng s·ª≠ d·ª•ng m√¥ h√¨nh DistilBERT ƒë√£ ƒë∆∞·ª£c tinh ch·ªânh ƒë·ªÉ ph√¢n t√≠ch 6 lo·∫°i c·∫£m x√∫c ch√≠nh:</p>
    <ul style="list-style: none; padding: 0; text-align: center;">
        <li>üòä Vui v·∫ª - ü•∫ Bu·ªìn b√£ - üò† T·ª©c gi·∫≠n</li>
        <li>üò® S·ª£ h√£i - ‚ù§Ô∏è Y√™u th∆∞∆°ng - üò≤ Ng·∫°c nhi√™n</li>
    </ul>
    <p>ƒê∆∞·ª£c x√¢y d·ª±ng b·∫±ng Hugging Face Transformers v√† Streamlit</p>
    <p><i>M√¥ h√¨nh: Dat1710/distilbert-base-uncased-finetuned-emotion</i></p>
</div>
""", unsafe_allow_html=True)

# Add requirements information

